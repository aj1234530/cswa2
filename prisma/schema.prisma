// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  username         String   @unique
  email            String   @unique
  password         String   @unique
  purchasedCourses Course[] @relation("UserCourse") //implicit m-m t with the courses table
}

//will be provided by the developer if anyone wants, the admin he need to contact the develope their codebase will be separately deployed(separate db, all that)
model Admin {
  id       String   @id @default(cuid())
  username String   @unique @default("username") //single quote not allowed
  password String   @unique @default("password")
  course   Course[]
}

model Course {
  id                         String                      @id @default(cuid())
  courseTitle                String
  courseDescription          String
  thumbnai                   String                      @default("keep default url here if there is no image upload")
  courseValidity             DateTime? //can add the validity here after that much time it, user won't be able to access that course
  user                       User[]                      @relation("UserCourse") //(no foreign key is requried), implicit relation,one User can have many courses(can have zero courses also)
  adminId                    String                      @unique
  admin                      Admin                       @relation(fields: [adminId], references: [id])
  rootCourseContentDirectory RootCourseContentDirectory?
}

//folder can have videos in it 
model RootCourseContentDirectory {
  id       String   @id @default(cuid())
  courseId String   @unique //one - one with course
  course   Course   @relation(fields: [courseId], references: [id])
  folder   Folder[] //list of folders(one to many)
  video    Video[]
  link     Link[]
  notes    Notes[]
}

model Folder {
  id                           String                     @id @default(cuid())
  title                        String
  videos                       Video[]
  notes                        Notes[]
  link                         Link[]
  rootCourseContentDirectoryId String                     @unique
  rootCourseContentDirectory   RootCourseContentDirectory @relation(fields: [rootCourseContentDirectoryId], references: [id])
  courseId                     String?
}

model Video {
  id                           String                     @id @default(cuid())
  title                        String
  url                          String
  rootCourseContentDirectoryId String                     @unique
  rootCourseContentDirectory   RootCourseContentDirectory @relation(fields: [rootCourseContentDirectoryId], references: [id])

  folderId String
  folder   Folder @relation(fields: [folderId], references: [id])
}

model Link {
  id                           String                     @id @default(cuid())
  courseId                     String
  rootCourseContentDirectoryId String                     @unique
  rootCourseContentDirectory   RootCourseContentDirectory @relation(fields: [rootCourseContentDirectoryId], references: [id])
  folderId                     String
  folder                       Folder                     @relation(fields: [folderId], references: [id])
}

model Notes {
  id                           String                     @id @default(cuid())
  rootCourseContentDirectoryId String
  rootCourseContentDirectory   RootCourseContentDirectory @relation(fields: [rootCourseContentDirectoryId], references: [id])
  folderId                     String
  folder                       Folder                     @relation(fields: [folderId], references: [id])
}

//1.What I have tried to create here?
//1. this code base is for a admin only - he will be given an id password by developer, will be deployed for the each admins(busineess) separately
//2. admin has default password set for now, we can give option to edit
//3. relation - Users to courses m-m 
//           - admin to course one to m
//there will apis for Users - get the course, for admins - create courses see the users on a course
//contents in the course

//1. four types of contents
//the admin can add all content to the root directory , that will show up in the content 
//i. folders
//ii. videos
//iii.links
//iv. notes
